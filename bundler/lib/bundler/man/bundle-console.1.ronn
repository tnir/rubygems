bundle-console(1) -- Deprecated way to open an IRB session with the bundle pre-loaded
=====================================================================================

## SYNOPSIS

`bundle console` [GROUP]

## DESCRIPTION

Starts an interactive Ruby console session in the context of the current bundle.

If no `GROUP` is specified, all gems in the `default` group in the [Gemfile(5)](https://bundler.io/man/gemfile.5.html) are
preliminarily loaded.

If `GROUP` is specified, all gems in the given group in the Gemfile in addition
to the gems in `default` group are loaded. Even if the given group does not
exist in the Gemfile, IRB console starts without any warning or error.

The environment variable `BUNDLE_CONSOLE` or `bundle config set console` can be used to change
the shell from the following:

* `irb` (default)
* `pry` (https://github.com/pry/pry)
* `ripl` (https://github.com/cldwalker/ripl)

`bundle console` uses irb by default. An alternative Pry or Ripl can be used with
`bundle console` by adjusting the `console` Bundler setting. Also make sure that
`pry` or `ripl` is in your Gemfile.

## EXAMPLE

    $ bundle config set console pry
    $ bundle console
    Resolving dependencies...
    [1] pry(main)>

## DEPRECATION

This command was deprecated in Bundler 2.1 and will be removed in 3.0.
Use `bin/console` script, which can be generated by `bundle gem <NAME>`.

In a new project, you can use [`bundle gem`](bundle-gem.1.html) command to generate command
on its creation. Once created, you can start an interactive shell with `bin/console`.

In the existing project, you can create `bin/console` by yourself:

    #!/usr/bin/env ruby
    # frozen_string_literal: true

    require "bundler/setup"
    # Remove the belog line if you are not using your own gem.
    require "your-gem-name" # Replace your own gem filename if you have.

    # You can add fixtures and/or initialization code here to make experimenting
    # with your gem easier. You can also use a different console, if you like.

    # (If you use this, don't forget to add pry to your Gemfile!)
    # require "pry"
    # Pry.start

    require "irb"
    IRB.start(__FILE__)

## SEE ALSO

[Gemfile(5)](https://bundler.io/man/gemfile.5.html)
